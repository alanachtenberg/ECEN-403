/*
 * main.c
 *
 *  Created on: Feb 3, 2015
 *      Author: Alan
 */

//------------------------INCLUDES-------------------------

#include "inc/hw_ints.h" // Macros that define the interrupt assignment on Stellaris devices

#include "inc/hw_memmap.h" /*: Macros defining the memory map of the Stellaris device. This includes
						  defines such as peripheral base address locations, e.g., GPIO_PORTF_BASE*/

#include "inc/hw_types.h" //Defines common types and macros such as tBoolean and HWREG(x)

#include "driverlib/sysctl.h" /*Defines and macros for System Control API of driverLib. This includes
								API functions such as SysCtlClockSet and SysCtlClockGet.*/

#include "driverlib/interrupt.h" /* Defines and macros for NVIC Controller (Interrupt) API of DriverLib.
								This includes API functions such as IntEnable and IntPrioritySet*/

#include "driverlib/gpio.h" /*Defines and macros for GPIO API of driverLib. This includes API functions
							such as GPIOPinTypePWM and GPIOPinWrite.*/

#include "driverlib/timer.h" /*Defines and macros for Timer API of driverLib. This includes API functions
							 such as TimerConfigure and TimerLoadSet.*/

//------------------------DEFINES--------------------------

//------------------------DATA STRUCTS---------------------


//------------------------MAIN-----------------------------
int main(void){

	unsigned long ulPeriod; //variable for measuring timer period

	//configures the system clock to 40 MHz
	//were using the 400MHz pll, that is auto divided by 2 and we are further dividing that by 5
	//the pll is driven by the main oscillator
	SysCtlClockSet(SYSCTL_SYSDIV_5|SYSCTL_USE_PLL|SYSCTL_XTAL_16MHZ|SYSCTL_OSC_MAIN);

	SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);// enables the GPIO F periph
	GPIOPinTypeGPIOOutput(GPIO_PORTF_BASE, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3); //sets pin 1 2 and 3 to output

	SysCtlPeripheralEnable(SYSCTL_PERIPH_TIMER0);//enables timer periph to recieve the sys clock
	TimerConfigure(TIMER0_BASE, TIMER_CFG_32_BIT_PER);//configs timer, arg 1 is base address for timer 0
													  //arg 2 configs the timer 0 in 32 bit periodic mode
	  	  	  	  	  	  	  	  	  	  	  	  	  //16 bit timer0a and timer0b are combined to create the 32 bit timer

	ulPeriod = (SysCtlClockGet() / 10) / 2; //gets the clock freq, divides by our desired freq (10hz) to get number of cycles
											//further divide the number of cycles by 2 to get cycles required for 50 percent duty cycle
	TimerLoadSet(TIMER0_BASE, TIMER_A, ulPeriod -1);//loads the period into the timer to fire interrupts every ulPeriod cycles
													//minus one because timer fires on 0 count

	IntEnable(INT_TIMER0A);//enables the specific vector in nested vector interrupt controller(NVIC)
	TimerIntEnable(TIMER0_BASE, TIMER_TIMA_TIMEOUT);//enables specific event to fire interrupt ie the "timeout"
	IntMasterEnable();//master enable of interrupts

	TimerEnable(TIMER0_BASE, TIMER_A);//actually enables/starts the timer

	while(1);// infinite loop to keep program running, all logic will be handled with interrupts



	return 0;
}

