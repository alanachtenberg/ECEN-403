/*
 * main.c
 *
 *  Created on: Feb 2, 2015
 *      Author: Alan
 */


/*
 * Stellaris Tri-color LED, Software toggle
 *
 * This program will toggle inside of a loop to start and stop the led blinking
 *
 * MCU Model Number: LM4120H5QR, important for project target/compiler

 * Pin Numbers
 *
 * PF1 - RED LED
 * PF2 - BLUE LED
 * PF3 - GREEN LED
 */

//---------------------------------INCLUDES---------------------------------

#include <inc/hw_types.h>
//common types and macros such as tBoolean and HWREG(x)
#include <inc/hw_memmap.h>
//Macros defining memory mapping of the stellaris, including peripheral base address locations
#include <driverlib/sysctl.h>
//Defines and macros for System Control API of DriverLib, including SysCtlClockSet and SysCtlClockGet
#include <driverlib/gpio.h>
//Defines and macros for GPIO api. This includes functions GPIOPinTypePWM & GPIOPinWrite



//---------------------------------MAIN---------------------------------

int main(){
	int PinData = 2; /*Creates an integer variable called PinData and initializes it to 2.
	This will be used to cycle through the three LEDs, lighting them one at a time.*/

	/*Before calling any peripheral specific driverLib function, enable the clock
	for that peripheral. If not enabled, it will result in a Fault ISR (address fault).
	This is a common mistake for new Stellaris users.*/

	SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);
	/*Using the launchpad schematic, locate the GPIO layout. You will see grouping labeled PA#,
	PB#, PC#, PD#, PE#, and PF#. PF1, PF2, and PF3 connect the red, blue, and green LED lights on
	the tri-color LED.
	Now open the sysctl.h file and look for "#define SYSCTL_PERIPH_GPIO." There are several
	entries A to S.
	Since the tri-color LED is connected to GPIOF this is the peripheral to enable.*/


}
}
